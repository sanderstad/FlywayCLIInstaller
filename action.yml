name: 'FlywayCLIInstaller'
description: 'Install Flyway CLI'
author: 'Sander Stad'
branding:
  icon: 'terminal'
  color: 'blue'

inputs:
  version:
    description: 'The version of Flyway to install'
    required: false
    default: 'latest'

runs:
  using: 'composite'
  steps:
    - name: 'Get Flyway CLI version'
      shell: pwsh
      run: |
        #gci ${{GITHUB.ACTION_PATH}} -recurse -bla

        $flywayInfo = . ${{GITHUB.ACTION_PATH}}/scripts/Get-LatestFlywayCLIVersion.ps1

        $flywayInfo

        if("${{inputs.version}}" -eq 'latest') {
          $version = $flywayInfo.LatestVersion
        } else{
          $version = $flywayInfo.Versions | Where-Object { $_.Version -eq $version }
          if($version -eq $null) {
            Write-Error "Version $version not found. Available versions: $($flywayInfo.Versions.Version)"
          }
        }

        "flyway_version=$version" >> $env:GITHUB_ENV

    - name: Set Flyway CLI filename (Linux)
      if: runner.os == 'Linux'
      shell: pwsh
      run: |
        $fileName = "flyway-commandline-$env:flyway_version-linux-x64.tar.gz"
        "flyway_filename=$fileName" >> $env:GITHUB_ENV

    - name: Set Flyway CLI filename (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $fileName = "flyway-commandline-$env:flyway_version-windows-x64.zip"
        "flyway_filename=$fileName" >> $env:GITHUB_ENV

    - name: Download Flyway CLI
      shell: pwsh
      run: |
        $fileName = $env:flyway_filename
        $url = "https://download.red-gate.com/maven/release/com/redgate/flyway/flyway-commandline/$($env:flyway_version)/$fileName"
        $tempPath = $env:RUNNER_TEMP

        if (-not (Test-Path $tempPath)) {
          New-Item -ItemType Directory -Path $tempPath
        }

        $outFile = Join-Path $tempPath $fileName

        try {
          Invoke-WebRequest -Uri $url -OutFile $outFile
          Write-Host "Downloaded Flyway CLI to $outFile."
        } catch {
          Write-Error "Failed to download Flyway CLI: $_"
          exit 1
        }

    - name: 'Extract Flyway CLI'
      shell: pwsh
      run: |
        # Set up the installation directory
        $installDir = Join-Path $env:GITHUB_WORKSPACE "flyway-$($env:flyway_version)"

        # Check if the installation directory exists, if not create it
        if (-not (Test-Path $installDir)) {
          New-Item -ItemType Directory -Path $installDir
        }

        # Set the output file path
        $outFile = Join-Path $env:RUNNER_TEMP $env:flyway_filename

        # If the runner is Linux, extract the tar.gz file
        if($env:RUNNER_OS -eq 'Linux') {
          # Extract the tar.gz file
          Write-Host "Extracting Flyway CLI to $installDir."
          tar -xzf $outFile -C $installDir

          # Find the actual flyway executable path
          $flywayExe = Get-ChildItem -Path $installDir -Recurse -Filter flyway | Where-Object { -not $_.PSIsContainer } | Select-Object -First 1

          if ($flywayExe) {
            sudo ln -sf $flywayExe.FullName /usr/local/bin/flyway
          } else {
            Write-Error "Could not find the flyway executable after extraction."
            exit 1
          }
        }

        # If the runner is Windows, extract the zip file
        if($env:RUNNER_OS -eq 'Windows') {
          # Extract the zip file
          Write-Host "Extracted Flyway CLI to $installDir."
          Expand-Archive -Path $outFile -DestinationPath $installDir -Force

          # Add the Flyway CLI to the PATH environment variable
          $result = . ${{GITHUB.ACTION_PATH}}/scripts/Update-EnvPathVariable.ps1 -InstallDir $installDir

          # Check if the PATH variable was updated successfully
          if ($result) {
            Write-Host "Flyway CLI added to PATH successfully!"
          } else {
            Write-Error "Failed to add Flyway CLI to PATH."
            exit 1
          }
        }

        # Set the Flyway environment variables
        $flyway_path = Join-Path $installDir "flyway"
        "flyway.filename=$($flyway_path)" >> $env:GITHUB_ENV
        "flyway.version=$($env:flyway_version)" >> $env:GITHUB_ENV

    - name: 'Test Flyway CLI'
      shell: pwsh
      run: |

        # Check if the Flyway CLI is installed and accessible
        if($env:RUNNER_OS -eq 'Linux') {
          # Validate Flyway installation
          if flyway --version; then
            echo "Flyway is successfully installed and running version $(flyway --version | grep -Eo 'Flyway (Community|Pro|Enterprise|Teams) Edition [0-9]+\.[0-9]+\.[0-9]+' | awk '{print $4}')."
          else
            echo "Flyway installation failed. Please check for issues."
            exit 1  # Exit with failure status (non-zero) if Flyway isn't working
          fi
        }

        if($env:RUNNER_OS -eq 'Windows') {
          # Validate Flyway installation
          try {
              $flywayVersionOutput = flyway -v 2>&1
              if ($LASTEXITCODE -eq 0) {
                  # Extract the version number using regex
                  if ($flywayVersionOutput -match 'Flyway (Community|Pro|Enterprise|Teams) Edition ([0-9]+\.[0-9]+\.[0-9]+)') {
                      $edition = $matches[1]
                      $version = $matches[2]
                      Write-Host "Flyway is successfully installed and running version $version ($edition Edition)."
                  } else {
                      Write-Host "Flyway is installed, but could not parse version information."
                  }
              } else {
                  Write-Error "Flyway installation failed. Please check for issues."
                  exit 1
              }
          } catch {
              Write-Error "Flyway installation failed. Please check for issues."
              exit 1
          }
        }





